// === WiFi + DHT11 + PM2.5 + OLED Web Dashboard ===

#include <WiFiNINA.h>
#include <DHT.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// === WiFi credentials ===
char ssid[] = "Canari"; //!!!! 2.4GHz only !!!!
char pass[] = "Canari1234";

// === DHT11 settings ===
#define DHTPIN 2
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
const float TEMP_CORRECTION = 0.0;  //Adjust to calibrate temperature
const float HUMIDITY_CORRECTION = 0.0; //Adjust to calibrate humidity

// === PM2.5 Sensor ===
const int sharpLEDPin = 7;
const int sharpVoPin = A3;
float Voc = 0.6;
const float K = 0.5;
#define USE_AVG
#ifdef USE_AVG
#define N 100
static unsigned long VoRawTotal = 0;
static int VoRawCount = 0;
#endif

// === OLED setup ===
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// === WiFi Web Server ===
WiFiServer server(80);

// === Timing ===
unsigned long lastSampleTime = 0;
const unsigned long sampleInterval = 10;
float dustDensity = 0;
String airQuality = "Unknown";
String ipDisplay = "";

// === Smoothed sensor values ===
float smoothedDust = 0;
float smoothedTemp = 0;
float smoothedHumidity = 0;
const float alpha = 0.1;  // Increased smoothing for more stable readings

String getAirQualityLabel(float pm) {
  if (pm <= 12) return "Good";
  else if (pm <= 35.4) return "Moderate";
  else if (pm <= 55.4) return "Poor";
  else if (pm <= 150.4) return "Unhealthy";
  else if (pm <= 250.4) return "Very Unhealthy";
  else return "Hazardous";
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  dht.begin();

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    if (Serial) Serial.println(F("SSD1306 allocation failed"));
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Starting Canari...");
  display.display();

  pinMode(sharpLEDPin, OUTPUT);

  if (Serial) Serial.print("Connecting to WiFi");
  WiFi.begin(ssid, pass);
  unsigned long start = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - start < 30000) {
    if (Serial) Serial.print(".");
    delay(500);
  }

  if (WiFi.status() == WL_CONNECTED) {
    if (Serial) {
      Serial.println("\n✅ Connected to WiFi!");
      Serial.print("IP: ");
      Serial.println(WiFi.localIP());
    }
    server.begin();
    ipDisplay = WiFi.localIP().toString();
  } else {
    if (Serial) Serial.println("\n❌ WiFi failed.");
    ipDisplay = "Offline";
  }
}

void loop() {
  unsigned long now = millis();
  if (now - lastSampleTime >= sampleInterval) {
    lastSampleTime = now;

    digitalWrite(sharpLEDPin, LOW);
    delayMicroseconds(280);
    int VoRaw = analogRead(sharpVoPin);
    digitalWrite(sharpLEDPin, HIGH);
    delayMicroseconds(9720);

#ifdef USE_AVG
    VoRawTotal += VoRaw;
    VoRawCount++;
    if (VoRawCount >= N) {
      VoRaw = VoRawTotal / VoRawCount;
      VoRawTotal = 0;
      VoRawCount = 0;

      float Vo = VoRaw * (5.0 / 1024.0);
      float dV = Vo - Voc;
      if (dV < 0) {
        dV = 0;
        Voc = Vo;
      }
      float rawDust = dV / K * 100.0;
      smoothedDust = alpha * rawDust + (1 - alpha) * smoothedDust;
      dustDensity = smoothedDust;
      airQuality = getAirQualityLabel(dustDensity);
    }
#endif
  }

  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  if (!isnan(temperature)) {
    temperature += TEMP_CORRECTION;
    smoothedTemp = alpha * temperature + (1 - alpha) * smoothedTemp;
  }
  if (!isnan(humidity)) {
    humidity += HUMIDITY_CORRECTION;
    smoothedHumidity = alpha * humidity + (1 - alpha) * smoothedHumidity;
  }

  bool validDHT = !(isnan(temperature) || isnan(humidity));

  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("PM2.5: "); display.print(dustDensity, 1); display.println(" ug/m3");
  display.print("Air: "); display.println(airQuality);
  if (validDHT) {
    display.print("Temp: "); display.print(smoothedTemp, 1); display.println(" C");
    display.print("Humidity: "); display.print(smoothedHumidity, 1); display.println(" %");
  } else {
    display.println("DHT Error");
  }
  display.print("IP: "); display.println(ipDisplay);
  display.display();

  WiFiClient client = server.available();
  if (client) {
    if (Serial) Serial.println("📲 Client connected");

    String html = "HTTP/1.1 200 OK\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n";
    html += "<!DOCTYPE html><html><head><meta name='viewport' content='width=device-width, initial-scale=1'>";
    html += "<meta http-equiv='refresh' content='5'>";
    html += "<style>body{font-family:sans-serif;padding:20px;}h2{color:#0077cc;}p{font-size:18px;}</style>";
    html += "<title>Canari Monitor</title></head><body>";
    html += "<h2>Canari Environmental Monitor</h2>";
    html += "<p><strong>PM2.5:</strong> " + String(dustDensity, 1) + " µg/m³</p>";
    html += "<p><strong>Air Quality:</strong> " + airQuality + "</p>";
    if (validDHT) {
      html += "<p><strong>Temperature:</strong> " + String(smoothedTemp, 1) + " °C</p>";
      html += "<p><strong>Humidity:</strong> " + String(smoothedHumidity, 1) + " %</p>";
    } else {
      html += "<p><strong>DHT sensor error</strong></p>";
    }
    html += "<p>Auto-refreshes every 5 seconds.</p>";
    html += "</body></html>";

    client.print(html);
    delay(1);
    client.stop();
    if (Serial) Serial.println("🔌 Client disconnected");
  }
}
